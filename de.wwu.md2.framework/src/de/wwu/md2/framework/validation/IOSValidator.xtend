package de.wwu.md2.framework.validation

//import de.wwu.md2.framework.validation.AbstractMD2JavaValidator

import com.google.common.collect.Sets
import de.wwu.md2.framework.mD2.Action
import de.wwu.md2.framework.mD2.AttributeType
import de.wwu.md2.framework.mD2.ContainerElement
import de.wwu.md2.framework.mD2.ContentElement
import de.wwu.md2.framework.mD2.CustomCodeFragment
import de.wwu.md2.framework.mD2.EventDef
import de.wwu.md2.framework.mD2.InputElement
import de.wwu.md2.framework.mD2.MD2Package
import de.wwu.md2.framework.mD2.SimpleAction
import de.wwu.md2.framework.mD2.StandardValidator
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.validation.Check

class IOSValidator extends AbstractMD2Validator{
    public static final String NOTSUPPORTEDBYIOSGENERATOR = " not supported by iOS Generator: "
    public static final String USAGEOFKEYWORD = ". Using this keyword will have no effect."
    public static final String UNSUPPORTEDKEYWORD = "unsupportedKeywordByIOSGenerator"
 
    // View
    @Check
    def checkContainerElements(ContainerElement containerElement) {
        var supportedContainerElements = Sets.newHashSet(
            MD2Package.eINSTANCE.gridLayoutPane,
            MD2Package.eINSTANCE.flowLayoutPane
//            MD2Package.eINSTANCE.alternativesPane,
//            MD2Package.eINSTANCE.tabbedAlternativesPane
        );
        
        if (!supportedContainerElements.contains(containerElement.eClass)) {
        	
			val node = NodeModelUtils.findActualNodeFor(containerElement)
			for (n : node.asTreeIterable) {
				val ge = n.grammarElement

				if (ge instanceof Keyword) {
					messageAcceptor.acceptWarning(
						"ContainerElement" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + containerElement.eClass.name + USAGEOFKEYWORD,
						containerElement,
						n.offset,
						n.length,
						UNSUPPORTEDKEYWORD
					)
				}
			}            
        }
    }
    
    @Check
    def checkContentElements(ContentElement contentElement) {
        var supportedKeywords = Sets.newHashSet(
            MD2Package.eINSTANCE.inputElement 
            , MD2Package.eINSTANCE.image
            , MD2Package.eINSTANCE.autoGeneratedContentElement // Should be okay because of preprocessing
			, MD2Package.eINSTANCE.spacer
			, MD2Package.eINSTANCE.button 
			, MD2Package.eINSTANCE.label
			, MD2Package.eINSTANCE.tooltip
//			, MD2Package.eINSTANCE.uploadedImageOutput
			, MD2Package.eINSTANCE.booleanInput 
            , MD2Package.eINSTANCE.textInput
            , MD2Package.eINSTANCE.integerInput
			, MD2Package.eINSTANCE.numberInput
			, MD2Package.eINSTANCE.dateInput 
			, MD2Package.eINSTANCE.timeInput
			, MD2Package.eINSTANCE.dateTimeInput 
			, MD2Package.eINSTANCE.optionInput
        );
        
        if (!supportedKeywords.contains(contentElement.eClass)) {
            warning("ContentElement" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + contentElement.eClass.name + USAGEOFKEYWORD,
                MD2Package.eINSTANCE.attributeTypeParam.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    @Check
    def checkInputElements(InputElement inputElement) {
        var supportedKeywords = Sets.newHashSet(
            MD2Package.eINSTANCE.booleanInput 
            , MD2Package.eINSTANCE.textInput
            , MD2Package.eINSTANCE.integerInput
			, MD2Package.eINSTANCE.numberInput
			, MD2Package.eINSTANCE.dateInput 
			, MD2Package.eINSTANCE.timeInput
			, MD2Package.eINSTANCE.dateTimeInput 
			, MD2Package.eINSTANCE.optionInput
//			, MD2Package.eINSTANCE.entitySelector
//			, MD2Package.eINSTANCE.fileUpload
        );
        
        if (!supportedKeywords.contains(inputElement.eClass)) {
            warning("InputElement" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + inputElement.eClass.name + USAGEOFKEYWORD,
                MD2Package.eINSTANCE.attributeTypeParam.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    // Controller
    @Check
    def checkValidators(StandardValidator validator) {
        var supportedValidator = Sets.newHashSet(
//            MD2Package.eINSTANCE.standardRegExValidator
        );
        
        if (!supportedValidator.contains(validator.eClass)) {
            warning("StandardValidator" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + validator.eClass.name + ". Using this parameter will have no effect.",
                MD2Package.eINSTANCE.standardValidator.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    @Check
    def checkAction(Action action) {
        var supportedActions = Sets.newHashSet(
            MD2Package.eINSTANCE.customAction
//			, MD2Package.eINSTANCE.combinedAction
        );
        
        if (!supportedActions.contains(action.eClass)) {
            warning("Action" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + action.eClass.name + ". Using this parameter will have no effect.",
                MD2Package.eINSTANCE.standardValidator.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    @Check
    def checkSimpleAction(SimpleAction simpleAction) {
        var supportedActionTypes = Sets.newHashSet(
            MD2Package.eINSTANCE.gotoViewAction
			, MD2Package.eINSTANCE.disableAction
			, MD2Package.eINSTANCE.enableAction
			, MD2Package.eINSTANCE.displayMessageAction
			, MD2Package.eINSTANCE.contentProviderOperationAction
			, MD2Package.eINSTANCE.contentProviderResetAction
			, MD2Package.eINSTANCE.fireEventAction
			, MD2Package.eINSTANCE.webServiceCallAction
        );
        
        if (!supportedActionTypes.contains(simpleAction.eClass)) {
            warning("SimpleActionRef" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + simpleAction.eClass.name + ". Using this parameter will have no effect.",
                MD2Package.eINSTANCE.standardValidator.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    @Check
    def checkEventDef(EventDef eventDef) {
        var supportedKeywords = Sets.newHashSet(
          	MD2Package.eINSTANCE.contentProviderEventRef
          	, MD2Package.eINSTANCE.contentProviderReference
          	, MD2Package.eINSTANCE.contentProviderPath
//			, MD2Package.eINSTANCE.contentProviderPathEventRef
			, MD2Package.eINSTANCE.viewElementEventRef
			, MD2Package.eINSTANCE.globalEventRef
//			, MD2Package.eINSTANCE.conditionalEventRef
        );
        
        if (!supportedKeywords.contains(eventDef.eClass)) {
            warning("EventDef" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + eventDef.eClass.name + ". Using this parameter will have no effect.",
                MD2Package.eINSTANCE.standardValidator.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    			
    @Check
    def checkCustomCodeFragment(CustomCodeFragment fragment) {
        var supportedKeywords = Sets.newHashSet(
          	MD2Package.eINSTANCE.callTask
          	, MD2Package.eINSTANCE.contentProviderPath
			, MD2Package.eINSTANCE.contentProviderSetTask
			, MD2Package.eINSTANCE.eventBindingTask
			, MD2Package.eINSTANCE.eventUnbindTask
			, MD2Package.eINSTANCE.mappingTask
			, MD2Package.eINSTANCE.unmappingTask
			, MD2Package.eINSTANCE.validatorBindingTask
			, MD2Package.eINSTANCE.validatorUnbindTask
			, MD2Package.eINSTANCE.attributeSetTask
			, MD2Package.eINSTANCE.conditionalCodeFragment
//			, MD2Package.eINSTANCE.viewElementSetTask
			, MD2Package.eINSTANCE.abstractViewGUIElementRef
			, MD2Package.eINSTANCE.contentProviderReference
        );
        
        if (!supportedKeywords.contains(fragment.eClass)) {
            warning("CustomCodeFragment" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + fragment.eClass.name + ". Using this parameter will have no effect.",
                MD2Package.eINSTANCE.standardValidator.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
    
    // Model
	@Check
    def checkAttributeTypes(AttributeType attributeType) {
        var supportedParamTypes = Sets.newHashSet(
            MD2Package.eINSTANCE.integerType
            , MD2Package.eINSTANCE.floatType
            , MD2Package.eINSTANCE.stringType
            , MD2Package.eINSTANCE.booleanType
            , MD2Package.eINSTANCE.dateType
            , MD2Package.eINSTANCE.timeType
            , MD2Package.eINSTANCE.dateTimeType
            , MD2Package.eINSTANCE.enumType
            , MD2Package.eINSTANCE.referencedType
//            , MD2Package.eINSTANCE.fileType
        );
        
        if (!supportedParamTypes.contains(attributeType.eClass)) {
            warning("AttributeType" + IOSValidator.NOTSUPPORTEDBYIOSGENERATOR + attributeType.eClass.name + USAGEOFKEYWORD,
                MD2Package.eINSTANCE.attributeTypeParam.EIDAttribute, -1, UNSUPPORTEDKEYWORD
            );
        }
    }
}